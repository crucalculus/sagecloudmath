
︠076d32b0-37d7-41ef-becf-0bb406ce79e2i︠
%md
# Simple Animations
========================
## A SAGE worksheet documenting how basic animations work in sage cloud math
︡32ad24a2-83bd-4f43-92c1-ca814f8383d1︡{"html":"<h1># Simple Animations</h1>\n\n<h2>A SAGE worksheet documenting how basic animations work in sage cloud math</h2>\n"}︡
︠b11890e5-bb31-4f0f-a5d8-f89dbb45957br︠

# start simply by graphing a point
var('x y')
︡75b1c513-8e94-4d95-8775b1c513-8e94-4d95-8785-0565c8513d32︡
︠3a51aab6-820f-43dc-bfae-f3d5a36f3156︠
x=2;y=4;
point1 = point((x,y))
︡c2c880ca-ad41-413a-bbb4-b2d59199b73c︡
︠6d7dfa8b-851a-4245-b271-d099f4e5b422︠
plot(point1)
︡2f8bd8c9-2c29-4ae3-ae7b-4632081b2780︡{"once":false,"file":{"show":true,"uuid":"8d7e71cd-c58b-49ea-babc-ca8f59a66ea0","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/24274/tmp_WHJomx.png"}}︡
︠ff4af155-95e2-494a-a183-ebd6d435dfaf︠
points = [point((i,3)) for i in srange(0,4,1)]
plot(points)
︡b49a2ae6-9c72-4670-90c6-a6e441794e8f︡{"once":false,"file":{"show":true,"uuid":"3ea23012-3bae-4551-987a-f65bdae4fab1","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/24274/tmp_j9xQzx.png"}}︡
︠3aa11c98-8cd5-4224-bf44-300a59a09ac9︠
# the animate function takes the following arguments:
# * the first is a reference to a graphics object. here it is a point a list of points generated by the [ ... ] syntax
# * the rest of the arguments set up the window size for the plot
# which is displayed using the show() command.
a = animate([point((i,3)) for i in srange(0,4,.1)],xmin=0,ymin=0,xmax=5,ymax=4)
a.show() # optional -- ImageMagick
︡0d9c0574-6a7e-44f9-9bde-5bb31cbc9420︡{"once":false,"file":{"show":true,"uuid":"2a5478ea-6d1a-4227-b420-4d023f430470","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/5356/tmp_vI3xYQ.gif"}}︡{"once":false,"file":{"show":true,"uuid":"2a5478ea-6d1a-4227-b420-4d023f430470","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/5356/tmp_vI3xYQ.gif"}}︡{"once":false,"file":{"show":true,"uuid":"2a5478ea-6d1a-4227-b420-4d023f430470","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/5356/tmp_vI3xYQ.gif"}}︡
︠47d960c7-721b-4c63-a144-d77c28e81967︠

# a is the blue circle
step = 0.1
v = []
for t in srange(0,4*pi,step):
    v.append(circle((t,1),1))
a = animate(v, xmin=-1, ymin=0, xmax=4*pi+0.5, ymax=2, figsize=[9,2])

# b is the point on the circle that draws the cycloid
M = Graphics()
w = []
for t in srange(0,4*pi+0.5,step):
    M += point((t-sin(t),1-cos(t)),pointsize=20)
    # w.append(point((t-sin(t),1-cos(t)),pointsize=20))
    w.append(M)
b = animate(w, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# c is the red line that creates the curve by stringing together a lot of little lines connecting points.
L = Graphics()
x = []
for t in srange(0,4*pi+0.5,step):
    L += line([(t-step-sin(t-step),1-cos(t-step)),(t-sin(t),1-cos(t))], rgbcolor=(1,0,0), thickness=2)
    x.append(L)
c = animate(x, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# Here's where we can either show the animation in this worksheet or save it to an mpg. (Still trying to figure out the video format that works...)
#(a+b+c).show()
(a+b+c).ffmpeg(savefile='cycloid.mpg')


︠334eab0b-d8b8-4927-9f32-1e38122aa968︠

# create the curve the particle will follow
#f = x^2

P = Graphics()
z = []
for t in srange(-4,4,step):
    P += point((t,t^2),pointsize=20)
    z.append(P)
d = animate(z, xmin=-5, ymin=-1, xmax=5, ymax=20)

Q = Graphics()
n = []
for t in srange(-4,4,step):
    Q += point((2*t,(2*t)^2),pointsize=20,color='red')
    n.append(Q)
e = animate(n, xmin=-5,ymin=-1, xmax=5, ymax=20)

#show(d+e)
(d+e).ffmpeg(savefile='parametric.mpg')


︠ffc109bf-6a03-4173-aefe-e118d5fbcb52︠
# a is the blue circle
step = 0.1
v = []
for t in srange(0,4*pi,step):
    v.append(circle((t,1),1))
a = animate(v, xmin=-1, ymin=0, xmax=4*pi+0.5, ymax=2, figsize=[9,2])

# b is the point on the circle that draws the cycloid
M = Graphics()
w = []
for t in srange(0,4*pi+0.5,step):
    M += point((t-sin(t),1-cos(t)),pointsize=20)
    # w.append(point((t-sin(t),1-cos(t)),pointsize=20))
    w.append(M)
b = animate(w, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# c is the red line that creates the curve by stringing together a lot of little lines connecting points.
L = Graphics()
x = []
for t in srange(0,4*pi+0.5,step):
    L += line([(t-step-sin(t-step),1-cos(t-step)),(t-sin(t),1-cos(t))], rgbcolor=(1,0,0), thickness=2)
    x.append(L)
c = animate(x, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# Here's where we can either show the animation in this worksheet or save it to an mpg. (Still trying to figure out the video format that works...)
#(a+b+c).show()
(a+b+c).ffmpeg(savefile='cycloid.mpg')


︠43fad983-d250-4cf3-9833-bceb71a8aebe︠

# create the curve the particle will follow
#f = x^2

P = Graphics()
z = []
for t in srange(-4,4,step):
    P += point((t,t^2),pointsize=20)
    z.append(P)
d = animate(z, xmin=-5, ymin=-1, xmax=5, ymax=20)

Q = Graphics()
n = []
for t in srange(-4,4,step):
    Q += point((2*t,(2*t)^2),pointsize=20,color='red')
    n.append(Q)
e = animate(n, xmin=-5,ymin=-1, xmax=5, ymax=20)

#show(d+e)
(d+e).ffmpeg(savefile='parametric.mpg')


︠0c56ce14-6272-4893-8993-f7e5dbb9515b︠
# a is the blue circle
step = 0.1
v = []
for t in srange(0,4*pi,step):
    v.append(circle((t,1),1))
a = animate(v, xmin=-1, ymin=0, xmax=4*pi+0.5, ymax=2, figsize=[9,2])

# b is the point on the circle that draws the cycloid
M = Graphics()
w = []
for t in srange(0,4*pi+0.5,step):
    M += point((t-sin(t),1-cos(t)),pointsize=20)
    # w.append(point((t-sin(t),1-cos(t)),pointsize=20))
    w.append(M)
b = animate(w, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# c is the red line that creates the curve by stringing together a lot of little lines connecting points.
L = Graphics()
x = []
for t in srange(0,4*pi+0.5,step):
    L += line([(t-step-sin(t-step),1-cos(t-step)),(t-sin(t),1-cos(t))], rgbcolor=(1,0,0), thickness=2)
    x.append(L)
c = animate(x, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# Here's where we can either show the animation in this worksheet or save it to an mpg. (Still trying to figure out the video format that works...)
(a+b+c).show()
#(a+b+c).ffmpeg(savefile='cycloid.mpg')


︡ac885a1a-0fb4-4880-97ec-debdb5954cb5︡{"once":false,"file":{"show":true,"uuid":"242bb975-117d-4798-babd-c9f13e757f5b","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/1510/tmp_YqpmDO.gif"}}︡
︠2057a60c-7f5b-4dfc-a838-f55fcbe5bbf0︠

# create the curve the particle will follow
#f = x^2

P = Graphics()
z = []
for t in srange(-4,4,step):
    P += point((t,t^2),pointsize=20)
    z.append(P)
d = animate(z, xmin=-5, ymin=-1, xmax=5, ymax=20)

Q = Graphics()
n = []
for t in srange(-4,4,step):
    Q += point((2*t,(2*t)^2),pointsize=20,color='red')
    n.append(Q)
e = animate(n, xmin=-5,ymin=-1, xmax=5, ymax=20)

#show(d+e)
(d+e).ffmpeg(savefile='parametric.mpg')


︠45230178-50ab-4482-9a64-72c541c2ffd1︠


# Let's try and generate a sine or cosine wave... not sure if this will work or not
# a is the blue circle
step = 0.1
v = []
for t in srange(0,4*pi,step):
    v.append(circle((t,0),1))
a = animate(v, xmin=-1, ymin=0, xmax=4*pi+0.5, ymax=2, figsize=[9,2])

# b is the point on the circle that draws the cycloid
M = Graphics()
w = []
for t in srange(0,4*pi+0.5,step):
    M += point((t-sin(t),0-cos(t)),pointsize=20)
    # w.append(point((t-sin(t),1-cos(t)),pointsize=20))
    w.append(M)
b = animate(w, xmin=-1, ymin=0, xmax=8, ymax=2, figsize=[9,2])

# c is the red line that creates the curve by stringing together a lot of little lines connecting points.
L = Graphics()
x = []
for t in srange(0,4*pi+0.5,step):
    L += line([(t-step-sin(t-step),0-cos(t-step)),(t-sin(t),0-cos(t))], rgbcolor=(1,0,0), thickness=2)
    x.append(L)
c = animate(x, xmin=-1, ymin=-2, xmax=8, ymax=2, figsize=[9,2])

# Here's where we can either show the animation in this worksheet or save it to an mpg. (Still trying to figure out the video format that works...)
(a+b+c).show()
#(a+b+c).ffmpeg(savefile='cycloid.mpg')
︡5c8e383e-6a9e-483f-af2a-40bfda4b1125︡{"once":false,"file":{"show":true,"uuid":"117cc48e-876e-4b97-abc3-1dcccfacb36f","filename":"/projects/71d05d9f-884f-4ae9-80d7-2563cc75a382/.sage/temp/compute6dc2/1596/tmp_g3MR4W.gif"}}︡
︠c9f69fd4-b4e7-47ee-88e0-110ad660cc37︠









